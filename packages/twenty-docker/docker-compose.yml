version: '3.7'
name: twenty
services:
  server:
    image: 'twentycrm/twenty:${TAG}'
    volumes:
      - 'server-local-data:/app/packages/twenty-server/$${STORAGE_LOCAL_PATH:-.local-storage}'
      - 'docker-data:/app/docker-data'
    ports:
      - '3000:3000'
    environment:
      - PORT=3000
      - 'PG_DATABASE_URL=postgres://twenty:twenty@${PG_DATABASE_HOST}/default'
      - 'SERVER_URL=${SERVER_URL}'
      - 'IS_SIGN_UP_DISABLED=${IS_SIGN_UP_DISABLED}'
      - 'FRONT_BASE_URL=${FRONT_BASE_URL:-$SERVER_URL}'
      - 'MESSAGE_QUEUE_TYPE=${MESSAGE_QUEUE_TYPE}'
      - ENABLE_DB_MIGRATIONS=true
      - 'STORAGE_TYPE=${STORAGE_TYPE}'
      - 'ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}'
      - 'LOGIN_TOKEN_SECRET=${LOGIN_TOKEN_SECRET}'
      - 'REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}'
      - 'FILE_TOKEN_SECRET=${FILE_TOKEN_SECRET}'
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: 'curl --fail http://localhost:3000/healthz'
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always
  worker:
    image: 'twentycrm/twenty:${TAG}'
    command:
      - yarn
      - 'worker:prod'
    environment:
      - 'PG_DATABASE_URL=postgres://twenty:twenty@${PG_DATABASE_HOST}/default'
      - 'SERVER_URL=${SERVER_URL}'
      - 'IS_SIGN_UP_DISABLED=${IS_SIGN_UP_DISABLED}'
      - 'FRONT_BASE_URL=${FRONT_BASE_URL:-$SERVER_URL}'
      - 'MESSAGE_QUEUE_TYPE=${MESSAGE_QUEUE_TYPE}'
      - ENABLE_DB_MIGRATIONS=false
      - 'STORAGE_TYPE=${STORAGE_TYPE}'
      - 'ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}'
      - 'LOGIN_TOKEN_SECRET=${LOGIN_TOKEN_SECRET}'
      - 'REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}'
      - 'FILE_TOKEN_SECRET=${FILE_TOKEN_SECRET}'
    depends_on:
      db:
        condition: service_healthy
      server:
        condition: service_healthy
    restart: always
  db:
    image: 'twentycrm/twenty-postgres:${TAG}'
    volumes:
      - 'db-data:/bitnami/postgresql'
    environment:
      - 'POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASSWORD}'
    healthcheck:
      test: 'pg_isready -U twenty -d default'
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always
volumes:
  docker-data: {  }
  db-data: {  }
  server-local-data: {  }
